
> names(par())
 [1] "xlog"      "ylog"      "adj"       "ann"       "ask"       "bg"        "bty"       "cex"      
 [9] "cex.axis"  "cex.lab"   "cex.main"  "cex.sub"   "cin"       "col"       "col.axis"  "col.lab"  
[17] "col.main"  "col.sub"   "cra"       "crt"       "csi"       "cxy"       "din"       "err"      
[25] "family"    "fg"        "fig"       "fin"       "font"      "font.axis" "font.lab"  "font.main"
[33] "font.sub"  "lab"       "las"       "lend"      "lheight"   "ljoin"     "lmitre"    "lty"      
[41] "lwd"       "mai"       "mar"       "mex"       "mfcol"     "mfg"       "mfrow"     "mgp"      
[49] "mkh"       "new"       "oma"       "omd"       "omi"       "page"      "pch"       "pin"      
[57] "plt"       "ps"        "pty"       "smo"       "srt"       "tck"       "tcl"       "usr"      
[65] "xaxp"      "xaxs"      "xaxt"      "xpd"       "yaxp"      "yaxs"      "yaxt"      "ylbias"   

| Nice work!

  |==============                       |  37%

| Variety is the spice of life. You might recognize some of these such as col and lwd from previous
| swirl lessons. You can always run ?par to see what they do. For now, run the command par()$pin and
| see what you get.

> par()$pin
[1] 5.416111 1.796667

| Keep working like that and you'll get there!

  |==============                       |  38%

| Alternatively, you could have gotten the same result by running par("pin") or par('pin')).  What do
| you think these two numbers represent?

1: Random numbers
2: Coordinates of the center of the plot window
3: A confidence interval
4: Plot dimensions in inches

Selection: 4

| All that hard work is paying off!

  |===============                      |  40%

| Now, run the command par("fg") or or
| par('fg') or par()$fg and see what you get.

> par('fg')
[1] "black"

| Excellent job!

  |===============                      |  42%

| It gave you a color, right? Since par()$fg
| specifies foreground color, what do you
| think par()$bg specifies?

1: Better color
2: Beautiful color
3: blue-green
4: Background color

Selection: 4

| You got it!

  |================                     |  43%

| Many base plotting functions share a set of
| parameters. We'll go through some of the
| more commonly used ones now. See if you can
| tell what they do from their names.

...

  |=================                    |  45%

| What do you think the graphical parameter
| pch controls?

1: pc help
2: point control height
3: plot character
4: picture characteristics

Selection: 3

| You are amazing!

  |=================                    |  46%

| The plot character default is the open
| circle, but it "can either be a single
| character or an integer code for one of a
| set of graphics symbols." Run the command
| par("pch") to see the integer value of the
| default. When you need to, you can use R's
| Documentation (?pch) to find what the other
| values mean.

> par("pch")
[1] 1

| Keep up the great work!

  |==================                   |  48%

| So 1 is the code for the open circle. What
| do you think the graphical parameters lty
| and lwd control respectively?

1: line type and width
2: line length and width
3: line slope and intercept
4: line width and type

Selection: 1

| Great job!

  |==================                   |  49%

| Run the command par("lty") to see the
| default line type.

> par("lty")
[1] "solid"

| You got it!

  |===================                  |  51%

| So the default line type is solid, but it
| can be dashed, dotted, etc. Once again, R's
| ?par documentation will tell you what other
| line types are available. The line width is
| a positive integer; the default value is 1.

...

  |===================                  |  52%

| We've seen a lot of examples of col, the
| plotting color, specified as a number,
| string, or hex code; the colors() function
| gives you a vector of colors by name.

...

  |====================                 |  54%

| What do you think the graphical parameters
| xlab and ylab control respectively?

1: labels for the x- and y- axes
2: labels for the y- and x- axes

Selection: 1

| All that practice is paying off!

  |====================                 |  55%

| The par() function is used to specify global
| graphics parameters that affect all plots in
| an R session. (Use dev.off or plot.new to
| reset to the defaults.) These parameters can
| be overridden when specified as arguments to
| specific plotting functions. These include
| las (the orientation of the axis labels on
| the plot), bg (background color), mar
| (margin size), oma (outer margin size),
| mfrow and mfcol (number of plots per row,
| column).

...

  |=====================                |  57%

| The last two, mfrow and mfcol, both deal
| with multiple plots in that they specify the
| number of plots per row and column. The
| difference between them is the order in
| which they fill the plot matrix. The call
| mfrow will fill the rows first while mfcol
| fills the columns first.

...

  |======================               |  58%

| So to reiterate, first call a basic plotting
| routine. For instance, plot makes a
| scatterplot or other type of plot depending
| on the class of the object being plotted.

...

  |======================               |  60%

| As we've seen, R provides several annotating
| functions. Which of the following is NOT one
| of them?

1: lines
2: points
3: title
4: text
5: hist

Selection: 5

| You got it!

  |=======================              |  62%

| So you can add text, title, points, and
| lines to an existing plot. To add lines, you
| give a vector of x values and a
| corresponding vector of y values (or a
| 2-column matrix); the function lines just
| connects the dots. The function text adds
| text labels to a plot using specified x, y
| coordinates.

...

  |=======================              |  63%

| The function title adds annotations. These
| include x- and y- axis labels, title,
| subtitle, and outer margin. Two other
| annotating functions are mtext which adds
| arbitrary text to either the outer or inner
| margins of the plot and axis which adds axis
| ticks and labels. Another useful function is
| legend which explains to the reader what the
| symbols your plot uses mean.

...

  |========================             |  65%

| Before we close, let's test your ability to
| make a somewhat complicated scatterplot.
| First run plot with 3 arguments.
| airquality$Wind, airquality$Ozone, and type
| set equal to "n". This tells R to set up the
| plot but not to put the data in it.

> plot(airquality$Wind,airquality$Ozone, type = "n")

| All that practice is paying off!

  |========================             |  66%

| Now for the test. (You might need to check
| R's documentation for some of these.) Add a
| title with the argument main set equal to
| the string "Wind and Ozone in NYC"

> title(main = "Wind and Ozone in NYC")

| You are amazing!

  |=========================            |  68%

| Now create a variable called may by
| subsetting airquality appropriately. (Recall
| that the data specifies months by number and
| May is the fifth month of the year.)

> may<-subset(airquality, Month ==5)

| That's correct!

  |==========================           |  69%

| Now use the R command points to plot May's
| wind and ozone (in that order) as solid blue
| triangles. You have to set the color and
| plot character with two separate arguments.
| Note we use points because we're adding to
| an existing plot.

> par("type")
NULL
Warning message:
In par("type") : graphical parameter "type" is obsolete

| Not quite right, but keep trying. Or, type
| info() for more options.

| The code for solid blue trianges is 17 so
| typing
| points(may$Wind,may$Ozone,col="blue",pch=17)
| at the prompt should work.

> plot(may$Wind,may$Ozone, col = "blue", pch = 17)

| That's not exactly what I'm looking for. Try
| again. Or, type info() for more options.

| The code for solid blue trianges is 17 so
| typing
| points(may$Wind,may$Ozone,col="blue",pch=17)
| at the prompt should work.

> points(may$Wind,may$Ozone, col = "blue", pch = 17)

| You got it!

  |==========================           |  71%

| Now create the variable notmay by subsetting
| airquality appropriately.

> notmay <- subset(airquality, Month!=5)

| You got it right!

  |===========================          |  72%

| Now use the R command points to plot these
| notmay's wind and ozone (in that order) as
| red snowflakes.

> points(notmay$Wind,notmay$Ozone, col = "red", pch = 15)

| That's not the answer I was looking for, but
| try again. Or, type info() for more options.

| The code for snowflakes is 8 so typing
| points(notmay$Wind,notmay$Ozone,col="red",pch=8)
| at the prompt should work.

> points(notmay$Wind,notmay$Ozone, col = "red", pch = 8)

| You nailed it! Good job!

  |===========================          |  74%

| Now we'll use the R command legend to
| clarify the plot and explain what it means.
| The function has a lot of arguments, but
| we'll only use 4. The first will be the
| string "topright" to tell R where to put the
| legend. The remaining 3 arguments will each
| be 2-long vectors created by R's concatenate
| function, e.g., c(). These arguments are
| pch, col, and legend. The first is the
| vector (17,8), the second ("blue","red"),
| and the third ("May","Other Months"). Try it
| now.

> legend("topright", c(17,8), c("blue","red"), c("May","Other Months"))
Error in rect(left, top, r, b, angle = angle, density = density, ...) : 
  invalid color name 'May'
> legend("topright", pch = c(17,8), col = c("blue","red"), legend = c("May","Other Months"))

| Nice work!

  |============================         |  75%

| Now add a vertical line at the median of
| airquality$Wind. Make it dashed (lty=2) with
| a width of 2.


> abline(v = median(airquality$Wind), lty=2, lwd = 2)

| You're the best!

  |============================         |  77%

| Use par with the parameter mfrow set equal
| to the vector (1,2) to set up the plot
| window for two plots side by side. You won't
| see a result.

> par(mfrow = c(1,2))

| Keep up the great work!

  |=============================        |  78%

| Now plot airquality$Wind and
| airquality$Ozone and use main to specify the
| title "Ozone and Wind".

> plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")

| Your dedication is inspiring!

  |==============================       |  80%

| Now for the second plot.

...

  |==============================       |  82%

| Plot airquality$Wind and airquality$Solar.R
| and use main to specify the title "Ozone and
| Solar Radiation".

> plot(airquality$Wind,, airquality$Solar.R, main = "Ozone and Solar Radiation")
Error in plot.xy(xy, type, ...) : invalid plot type
> plot(airquality$Wind,airquality$Solar.R, main = "Ozone and Solar Radiation")

| You are really on a roll!

  |===============================      |  83%

| Now for something more challenging.

...

  |===============================      |  85%

| This one with 3 plots, to illustrate inner
| and outer margins. First, set up the plot
| window by typing par(mfrow = c(1, 3), mar =
| c(4, 4, 2, 1), oma = c(0, 0, 2, 0))

> par(mfrow = c(1,3), mar = c(4,4,2,1), oma = c(0, 0, 2, 0))

| All that hard work is paying off!

  |================================     |  86%

| Margins are specified as 4-long vectors of
| integers. Each number tells how many lines
| of text to leave at each side. The numbers
| are assigned clockwise starting at the
| bottom. The default for the inner margin is
| c(5.1, 4.1, 4.1, 2.1) so you can see we
| reduced each of these so we'll have room for
| some outer text.

...

  |================================     |  88%

| The first plot should be familiar. Plot
| airquality$Wind and airquality$Ozone with
| the title (argument main) as "Ozone and
| Wind".

> plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")

| Perseverance, that's the answer.

  |=================================    |  89%

| The second plot is similar.

...

  |==================================   |  91%

| Plot airquality$Solar.R and airquality$Ozone
| with the title (argument main) as "Ozone and
| Solar Radiation".

> plot(airquality$Solar.R , airquality$Ozone, main = "Ozone and Solar Radiation")

| Keep up the great work!

  |==================================   |  92%

| Now for the final panel.

...

  |===================================  |  94%

| Plot airquality$Temp and airquality$Ozone
| with the title (argument main) as "Ozone and
| Temperature".

> plot(airquality$Temp,airquality$Ozone, main = "Ozone and Temperature")

| All that hard work is paying off!

  |===================================  |  95%

| Now we'll put in a title.

...

  |==================================== |  97%

| Since this is the main title, we specify it
| with the R command mtext. Call mtext with
| the string "Ozone and Weather in New York
| City" and the argument outer set equal to
| TRUE.

> mtext("Ozone and Weather in New York City", outer = TRUE)

| You are quite good my friend!

  |==================================== |  98%

| Voila! Beautiful, right?

...

  |=====================================| 100%

| Congrats! You've weathered this lesson
| nicely and passed out of the No!zone.

| GGPlot2_Part2. (Slides for this and other
| Data Science courses may be found at github
| https://github.com/DataScienceSpecialization/courses/.
| If you care to use them, they must be
| downloaded as a zip file and viewed locally.
| This lesson corresponds to
| 04_ExploratoryAnalysis/ggplot2.)

...

  |=                                    |   2%

| In a previous lesson we showed you the vast
| capabilities of qplot, the basic workhorse
| function of the ggplot2 package. In this
| lesson we'll focus on some fundamental
| components of the package. These underlie
| qplot which uses default values when it
| calls them. If you understand these building
| blocks, you will be better able to customize
| your plots. We'll use the second workhorse
| function in the package, ggplot, as well as
| other graphing functions.

...

  |==                                   |   4%

| Do you remember what the gg of ggplot2
| stands for?

1: good grief
2: great graphics
3: goto graphics
4: grammar of graphics

Selection: 4

| You got it!

  |==                                   |   6%

| A "grammar" of graphics means that ggplot2
| contains building blocks with which you can
| create your own graphical objects. What are
| these basic components of ggplot2 plots?
| There are 7 of them.

...

  |===                                  |   9%

| Obviously, there's a DATA FRAME which
| contains the data you're trying to plot.
| Then the AESTHETIC MAPPINGS determine how
| data are mapped to color, size, etc. The
| GEOMS (geometric objects) are what you see
| in the plot (points, lines, shapes) and
| FACETS are the panels used in conditional
| plots. You've used these or seen them used
| in the first ggplot2 (qplot) lesson.

...

  |====                                 |  11%

| There are 3 more. STATS are statistical
| transformations such as binning, quantiles,
| and smoothing which ggplot2 applies to the
| data. SCALES show what coding an aesthetic
| map uses (for example, male = red, female =
| blue). Finally, the plots are depicted on a
| COORDINATE SYSTEM. When you use qplot these
| were taken care of for you.

...

  |=====                                |  13%

| Do you remember what the "artist's palette"
| model means in the context of plotting?

1: plots are built up in layers
2: we draw pictures
3: we mix paints
4: things get messy

Selection: 2

| Not quite right, but keep trying.

| Think about layers and creating a picture in
| several steps.

1: we mix paints
2: plots are built up in layers
3: we draw pictures
4: things get messy

Selection: 2

| All that practice is paying off!

  |======                               |  15%

| As in the base plotting system (and in
| contrast to the lattice system), when
| building plots with ggplot2, the plots are
| built up in layers, maybe in several steps.
| You can plot the data, then overlay a
| summary (for instance, a regression line or
| smoother) and then add any metadata and
| annotations you need.

...

  |======                               |  17%

| We'll keep using the mpg data that comes
| with the ggplot2 package. Recall the
| versatility of qplot. Just as a refresher,
| call qplot now with 6 arguments. The first 3
| deal with data - displ, hwy, and data=mpg.
| The fourth is geom set equal to the
| concatenation of the two strings, "point"
| and "smooth". The fifth is facets set equal
| to the formula .~drv, and the final argument
| is method set equal to the string "loess".
| Try this now.

> qplot(displ, hwy, data = mpg, geom = "smooth", facets = .~drv , method = "loess")

| That's not exactly what I'm looking for. Try
| again. Or, type info() for more options.

| Type qplot(displ, hwy, data = mpg,
| geom=c("point",
| "smooth"),facets=.~drv,method="loess") at
| the command prompt.

> qplot(displ, hwy, data = mpg,
+       | geom=c("point",
Error: unexpected '|' in:
"qplot(displ, hwy, data = mpg,
      |"
>                | "smooth"),facets=.~drv,method="loess") 
Error: unexpected '|' in "               |"
> qplot(displ, hwy, data = mpg,geom=c("point","smooth"),facets=.~drv,method="loess") 

| That's a job well done!

  |=======                              |  19%

| We see a 3 facet plot, one for each drive
| type (4, f, and r). The method argument
| specified the smoothing function (loess) we
| wanted to use to draw trend lines through
| the data. (We did this to avoid getting a
| warning message from R.) Now we'll see how
| ggplot works. We'll build up a similar plot
| using the basic components of the package.
| We'll do this in a series of steps.

...

  |========                             |  21%

| First we'll create a variable g by assigning
| to it the output of a call to ggplot with 2
| arguments. The first is mpg (our dataset)
| and the second will tell ggplot what we want
| to plot, in this case, displ and hwy. These
| are what we want our aesthetics to represent
| so we enclose these as two arguments to the
| function aes. Try this now.

> qplot(mpg, aes(displ,hwy))
Don't know how to automatically pick scale for object of type data.frame. Defaulting to continuous
Don't know how to automatically pick scale for object of type uneval. Defaulting to continuous
Error: Aesthetics must either be length one, or the same length as the dataProblems:aes(displ, hwy)
> qplot(mpg, displ, hwy)
Don't know how to automatically pick scale for object of type data.frame. Defaulting to continuous
Error in eval(expr, envir, enclos) : object 'displ' not found
> qplot(mpg, aes(displ,hwy))
Don't know how to automatically pick scale for object of type data.frame. Defaulting to continuous
Don't know how to automatically pick scale for object of type uneval. Defaulting to continuous
Error: Aesthetics must either be length one, or the same length as the dataProblems:aes(displ, hwy)
> g<-qplot(mpg, aes(displ,hwy))

| Not quite! Try again. Or, type info() for
| more options.

| Type g <- ggplot(mpg, aes(displ,hwy) ) at
| the command prompt.

> g<-ggplot(mpg, aes(displ,hwy))

| You are amazing!

  |=========                            |  23%

| Notice that nothing happened? As in the
| lattice system, ggplot created a graphical
| object which we assigned to the variable g.

...

  |=========                            |  26%

| Run the R command summary with g as its
| argument to see what g contains.

> summary(g)
data: manufacturer, model, displ, year,
  cyl, trans, drv, cty, hwy, fl, class
  [234x11]
mapping:  x = displ, y = hwy
faceting: facet_null() 

| You are quite good my friend!

  |==========                           |  28%

| So g contains the mpg data with all its
| named components in a 234 by 11 matrix. It
| also contains a mapping, x (displ) and y
| (hwy) which you specified, and no faceting.

...

  |===========                          |  30%

| Note that if you tried to print g with the
| expressions g or print(g) you'd get an
| error! Even though it's a great package,
| ggplot doesn't know how to display the data
| yet since you didn't specify how you wanted
| to see it. Now type g+geom_point() and see
| what happens.

> g+geom_point()

| You're the best!

  |============                         |  32%

| By calling the function geom_point you added
| a layer. By not assigning the expression to
| a variable you displayed a plot. Notice that
| you didn't have to pass any arguments to the
| function geom_point. That's because the
| object g has all the data stored in it.
| (Remember you saw that when you ran summary
| on g before.) Now use the expression you
| just typed (g + geom_point()) and add to it
| another layer, a call to geom_smooth().
| Notice the red message R gives you.

> geom_smooth(())
Error: unexpected ')' in "geom_smooth(()"
> geom_smooth()
geom_smooth:  
stat_smooth:  
position_identity: (width = NULL, height = NULL)

| That's not the answer I was looking for, but
| try again. Or, type info() for more options.

| Type g+geom_point()+geom_smooth() at the
| command prompt.

> g+geom_point()+geom_smooth()
geom_smooth: method="auto" and size of largest group is <1000, so using loess. Use 'method = x' to change the smoothing method.

| Nice work!

  |=============                        |  34%

| R is telling you that it used the smoothing
| function loess to display the trend of the
| data. The gray shadow around the blue line
| is the confidence band. See how wide it is
| at the right? Let's try a different
| smoothing function. Use the up arrow to
| recover the expression you just typed, and
| instead of calling geom_smooth with no
| arguments, call it with the argument method
| set equal to the string "lm".

> g+geom_point()+geom_smooth(method = "lm")

| You are really on a roll!

  |=============                        |  36%

| By changing the smoothing function to "lm"
| (linear model) ggplot2 generated a
| regression line through the data. Now recall
| the expression you just used and add to it
| another call, this time to the function
| facet_grid. Use the formula . ~ drv as it
| argument. Note that this is the same type of
| formula used in the calls to qplot.

> g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)

| All that practice is paying off!

  |==============                       |  38%

| Notice how each panel is labeled with the
| appropriate factor. All the data associated
| with 4-wheel drive cars is in the leftmost
| panel, front-wheel drive data is shown in
| the middle panel, and rear-wheel drive data
| in the rightmost. Notice that this is
| similar to the plot you created at the start
| of the lesson using qplot. (We used a
| different smoothing function than
| previously.)

...

  |===============                      |  40%

| So far you've just used the default labels
| that ggplot provides. You can add your own
| annotation using functions such as xlab(),
| ylab(), and ggtitle(). In addition, the
| function labs() is more general and can be
| used to label either or both axes as well as
| provide a title. Now recall the expression
| you just typed and add a call to the
| function ggtitle with the argument "Swirl
| Rules!".

> g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")

| You got it right!

  |================                     |  43%

| Now that you've seen the basics we'll talk
| about customizing. Each of the â€œgeomâ€
| functions (e.g., _point and _smooth) has
| options to modify it. Also, the function
| theme() can be used to modify aspects of the
| entire plot, e.g. the position of the
| legend. Two standard appearance themes are
| included in ggplot. These are theme_gray()
| which is the default theme (gray background
| with white grid lines) and theme_bw() which
| is a plainer (black and white) color scheme.

...

  |=================                    |  45%

| Let's practice modifying aesthetics now.
| We'll use the graphic object g that we
| already filled with mpg data and add a call
| to the function geom_point, but this time
| we'll give geom_point 3 arguments. Set the
| argument color equal to "pink", the argument
| size to 4, and the argument alpha to 1/2.
| Notice that all the arguments are set equal
| to constants.

> g+geom_point(color = "pink", size = 4, alpha =1/2)

| Excellent job!

  |=================                    |  47%

| Notice the different shades of pink? That's
| the result of the alpha aesthetic which you
| set to 1/2. This aesthetic tells ggplot how
| transparent the points should be. Darker
| circles indicate values hit by multiple data
| points.

...

  |==================                   |  49%

| Now we'll modify the aesthetics so that
| color indicates which drv type each point
| represents. Again, use g and add to it a
| call to the function geom_point with 3
| arguments. The first is size set equal to 4,
| the second is alpha equal to 1/2. The third
| is a call to the function aes with the
| argument color set equal to drv. Note that
| you MUST use the function aes since the
| color of the points is data dependent and
| not a constant as it was in the previous
| example.

> g+geom_point(size = 4, alpha = 1/2, aes(color = drv))

| You are doing so well!

  |===================                  |  51%

| Notice the helpful legend on the right
| decoding the relationship between color and
| drv.

...

  |====================                 |  53%

| Now we'll practice modifying labels. Again,
| we'll use g and add to it calls to 3
| functions. First, add a call to geom_point
| with an argument making the color dependent
| on the drv type (as we did in the previous
| example). Second, add a call to the function
| labs with the argument title set equal to
| "Swirl Rules!". Finally, add a call to labs
| with 2 arguments, one setting x equal to
| "Displacement" and the other setting y equal
| to "Hwy Mileage".

> g+geom_point(size = 4, alpha = 1/2, aes(color = drv), labs = "Swirl Rules!", xlab = "Displacement", ylab=  "Hwy Mileage")

| Not quite right, but keep trying. Or, type
| info() for more options.

| Type g + geom_point(aes(color = drv)) +
| labs(title="Swirl Rules!") +
| labs(x="Displacement", y="Hwy Mileage") at
| the command prompt.

> g+geom_point(aes(color = drv))+labs(title = "Swirl Rules!") + labs(x = "Displacement", y =  "Hwy Mileage")

| You got it!

  |====================                 |  55%

| Note that you could have combined the two
| calls to the function labs in the previous
| example. Now we'll practice customizing the
| geom_smooth calls. Use g and add to it a
| call to geom_point setting the color to drv
| type (remember to use the call to the aes
| function), size set to 2 and alpha to 1/2.
| Then add a call to geom_smooth with 4
| arguments. Set size equal to 4, linetype to
| 3, method to "lm", and se to FALSE.

> g+geom_point(color = drv, size = 2, alpah = 1/2)+geom_smooth(size = 4, linetype =3, method = "lm", se = FALSE)
Error in do.call("layer", list(mapping = mapping, data = data, stat = stat,  : 
  object 'drv' not found
> g+geom_point(aes(color = drv), size = 2, alpah = 1/2)+geom_smooth(size = 4, linetype =3, method = "lm", se = FALSE)

| Nice try, but that's not exactly what I was
| hoping for. Try again. Or, type info() for
| more options.

| Type g + geom_point(aes(color =
| drv),size=2,alpha=1/2) +
| geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
| at the command prompt.

> g+geom_point(aes(color = drv), size = 2, alpha = 1/2)+geom_smooth(size = 4, linetype =3, method = "lm", se = FALSE)

| You got it!

  |=====================                |  57%

| What did these arguments do? The method
| specified a linear regression (note the
| negative slope indicating that the bigger
| the displacement the lower the gas mileage),
| the linetype specified that it should be
| dashed (not continuous), the size made the
| dashes big, and the se flag told ggplot to
| turn off the gray shadows indicating
| standard errors (confidence intervals).

...

  |======================               |  60%

| Finally, let's do a simple plot using the
| black and white theme, theme_bw. Specify g
| and add a call to the function geom_point
| with the argument setting the color to the
| drv type. Then add a call to the function
| theme_bw with the argument base_family set
| equal to "Times". See if you notice the
| difference.

> g+geom_point(aes(color = drv),theme_bw="Times")

| You almost had it, but not quite. Try again.
| Or, type info() for more options.

| Type g + geom_point(aes(color = drv)) +
| theme_bw(base_family="Times") at the command
| prompt.

> g+geom_point(aes(color = drv),theme_bw=(base_family = "Times"))

| Not quite, but you're learning! Try again.
| Or, type info() for more options.

| Type g + geom_point(aes(color = drv)) +
| theme_bw(base_family="Times") at the command
| prompt.

> g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
There were 12 warnings (use warnings() to see them)

| All that hard work is paying off!

  |=======================              |  62%

| No more gray background! Also, if you have
| good eyesight, you'll notice that the font
| in the labels changed.

...

  |========================             |  64%

| One final note before we go through a more
| complicated, layered ggplot example, and
| this concerns the limits of the axes. We're
| pointing this out to emphasize a subtle
| difference between ggplot and the base
| plotting function plot.

...

  |========================             |  66%

| We've created some random x and y data,
| called myx and myy, components of a
| dataframe called testdat. These represent
| 100 random normal points, except halfway
| through, we made one of the points be an
| outlier. That is, we set its y-value to be
| out of range of the other points. Use the
| base plotting function plot to create a line
| plot of this data. Call it with 4 arguments
| - myx, myy, type="l", and ylim=c(-3,3). The
| type="l" tells plot you want to display the
| data as a line instead of as a scatterplot.

warning messages from top-level task callback 'mini'
There were 30 warnings (use warnings() to see them)
> ggplot(myx, myy, type = "l", ylim=c(-3,3))
Error in ggplot.data.frame(fortify(data, ...), mapping) : 
  Mapping should be created with aes or aes_string
> plot(myx, myy, type = "l", ylim = c(-3,3))

| You are quite good my friend!

  |=========================            |  68%

| Notice how plot plotted the points in the
| (-3,3) range for y-values. The outlier at
| (50,100) is NOT shown on the line plot. Now
| we'll plot the same data with ggplot. Recall
| that the name of the dataframe is testdat.
| Create the graphical object g with a call to
| ggplot with 2 arguments, testdat (the data)
| and a call to aes with 2 arguments, x set
| equal to myx, and y set equal to myy.

> g <- ggplot(mpg,aes(x=displ,y=hwy,color=factor(year)))

| Great job!

  |===============================      |  85%

| Uh oh! Nothing happened. Does g exist? Of course, it just isn't
| visible yet since you didn't add a layer.

1: a scatterplot would appear with 2 colors of points
2: R would return an error in red
3: I would have to try this to answer the question

Selection: 2

| You are doing so well!

  |=================================    |  89%

| We'll build the plot up step
| by step. First add to g a
| call to the function
| geom_point with 0 arguments.

[350] "grey89"              
[351] "grey90"              
[352] "grey91"              
[353] "grey92"              
[354] "grey93"              
[355] "grey94"              
[356] "grey95"              
[357] "grey96"              
[358] "grey97"              
[359] "grey98"              
[360] "grey99"              
[361] "grey100"             
[362] "honeydew"            
[363] "honeydew1"           
[364] "honeydew2"           
[365] "honeydew3"           
[366] "honeydew4"           
[367] "hotpink"             
[368] "hotpink1"            
[369] "hotpink2"            
[370] "hotpink3"            
[371] "hotpink4"            
[372] "indianred"           
[373] "indianred1"          
[374] "indianred2"          
[375] "indianred3"          
[376] "indianred4"          
[377] "ivory"               
[378] "ivory1"              
[379] "ivory2"              
[380] "ivory3"              
[381] "ivory4"              
[382] "khaki"               
[383] "khaki1"              
[384] "khaki2"              
[385] "khaki3"              
[386] "khaki4"              
[387] "lavender"            
[388] "lavenderblush"       
[389] "lavenderblush1"      
[390] "lavenderblush2"      
[391] "lavenderblush3"      
[392] "lavenderblush4"      
[393] "lawngreen"           
[394] "lemonchiffon"        
[395] "lemonchiffon1"       
[396] "lemonchiffon2"       
[397] "lemonchiffon3"       
[398] "lemonchiffon4"       
[399] "lightblue"           
[400] "lightblue1"          
[401] "lightblue2"          
[402] "lightblue3"          
[403] "lightblue4"          
[404] "lightcoral"          
[405] "lightcyan"           
[406] "lightcyan1"          
[407] "lightcyan2"          
[408] "lightcyan3"          
[409] "lightcyan4"          
[410] "lightgoldenrod"      
[411] "lightgoldenrod1"     
[412] "lightgoldenrod2"     
[413] "lightgoldenrod3"     
[414] "lightgoldenrod4"     
[415] "lightgoldenrodyellow"
[416] "lightgray"           
[417] "lightgreen"          
[418] "lightgrey"           
[419] "lightpink"           
[420] "lightpink1"          
[421] "lightpink2"          
[422] "lightpink3"          
[423] "lightpink4"          
[424] "lightsalmon"         
[425] "lightsalmon1"        
[426] "lightsalmon2"        
[427] "lightsalmon3"        
[428] "lightsalmon4"        
[429] "lightseagreen"       
[430] "lightskyblue"        
[431] "lightskyblue1"       
[432] "lightskyblue2"       
[433] "lightskyblue3"       
[434] "lightskyblue4"       
[435] "lightslateblue"      
[436] "lightslategray"      
[437] "lightslategrey"      
[438] "lightsteelblue"      
[439] "lightsteelblue1"     
[440] "lightsteelblue2"     
[441] "lightsteelblue3"     
[442] "lightsteelblue4"     
[443] "lightyellow"         
[444] "lightyellow1"        
[445] "lightyellow2"        
[446] "lightyellow3"        
[447] "lightyellow4"        
[448] "limegreen"           
[449] "linen"               
[450] "magenta"             
[451] "magenta1"            
[452] "magenta2"            
[453] "magenta3"            
[454] "magenta4"            
[455] "maroon"              
[456] "maroon1"             
[457] "maroon2"             
[458] "maroon3"             
[459] "maroon4"             
[460] "mediumaquamarine"    
[461] "mediumblue"          
[462] "mediumorchid"        
[463] "mediumorchid1"       
[464] "mediumorchid2"       
[465] "mediumorchid3"       
[466] "mediumorchid4"       
[467] "mediumpurple"        
[468] "mediumpurple1"       
[469] "mediumpurple2"       
[470] "mediumpurple3"       
[471] "mediumpurple4"       
[472] "mediumseagreen"      
[473] "mediumslateblue"     
[474] "mediumspringgreen"   
[475] "mediumturquoise"     
[476] "mediumvioletred"     
[477] "midnightblue"        
[478] "mintcream"           
[479] "mistyrose"           
[480] "mistyrose1"          
[481] "mistyrose2"          
[482] "mistyrose3"          
[483] "mistyrose4"          
[484] "moccasin"            
[485] "navajowhite"         
[486] "navajowhite1"        
[487] "navajowhite2"        
[488] "navajowhite3"        
[489] "navajowhite4"        
[490] "navy"                
[491] "navyblue"            
[492] "oldlace"             
[493] "olivedrab"           
[494] "olivedrab1"          
[495] "olivedrab2"          
[496] "olivedrab3"          
[497] "olivedrab4"          
[498] "orange"              
[499] "orange1"             
[500] "orange2"             
[501] "orange3"             
[502] "orange4"             
[503] "orangered"           
[504] "orangered1"          
[505] "orangered2"          
[506] "orangered3"          
[507] "orangered4"          
[508] "orchid"              
[509] "orchid1"             
[510] "orchid2"             
[511] "orchid3"             
[512] "orchid4"             
[513] "palegoldenrod"       
[514] "palegreen"           
[515] "palegreen1"          
[516] "palegreen2"          
[517] "palegreen3"          
[518] "palegreen4"          
[519] "paleturquoise"       
[520] "paleturquoise1"      
[521] "paleturquoise2"      
[522] "paleturquoise3"      
[523] "paleturquoise4"      
[524] "palevioletred"       
[525] "palevioletred1"      
[526] "palevioletred2"      
[527] "palevioletred3"      
[528] "palevioletred4"      
[529] "papayawhip"          
[530] "peachpuff"           
[531] "peachpuff1"          
[532] "peachpuff2"          
[533] "peachpuff3"          
[534] "peachpuff4"          
[535] "peru"                
[536] "pink"                
[537] "pink1"               
[538] "pink2"               
[539] "pink3"               
[540] "pink4"               
[541] "plum"                
[542] "plum1"               
[543] "plum2"               
[544] "plum3"               
[545] "plum4"               
[546] "powderblue"          
[547] "purple"              
[548] "purple1"             
[549] "purple2"             
[550] "purple3"             
[551] "purple4"             
[552] "red"                 
[553] "red1"                
[554] "red2"                
[555] "red3"                
[556] "red4"                
[557] "rosybrown"           
[558] "rosybrown1"          
[559] "rosybrown2"          
[560] "rosybrown3"          
[561] "rosybrown4"          
[562] "royalblue"           
[563] "royalblue1"          
[564] "royalblue2"          
[565] "royalblue3"          
[566] "royalblue4"          
[567] "saddlebrown"         
[568] "salmon"              
[569] "salmon1"             
[570] "salmon2"             
[571] "salmon3"             
[572] "salmon4"             
[573] "sandybrown"          
[574] "seagreen"            
[575] "seagreen1"           
[576] "seagreen2"           
[577] "seagreen3"           
[578] "seagreen4"           
[579] "seashell"            
[580] "seashell1"           
[581] "seashell2"           
[582] "seashell3"           
[583] "seashell4"           
[584] "sienna"              
[585] "sienna1"             
[586] "sienna2"             
[587] "sienna3"             
[588] "sienna4"             
[589] "skyblue"             
[590] "skyblue1"            
[591] "skyblue2"            
[592] "skyblue3"            
[593] "skyblue4"            
[594] "slateblue"           
[595] "slateblue1"          
[596] "slateblue2"          
[597] "slateblue3"          
[598] "slateblue4"          
[599] "slategray"           
[600] "slategray1"          
[601] "slategray2"          
[602] "slategray3"          
[603] "slategray4"          
[604] "slategrey"           
[605] "snow"                
[606] "snow1"               
[607] "snow2"               
[608] "snow3"               
[609] "snow4"               
[610] "springgreen"         
[611] "springgreen1"        
[612] "springgreen2"        
[613] "springgreen3"        
[614] "springgreen4"        
[615] "steelblue"           
[616] "steelblue1"          
[617] "steelblue2"          
[618] "steelblue3"          
[619] "steelblue4"          
[620] "tan"                 
[621] "tan1"                
[622] "tan2"                
[623] "tan3"                
[624] "tan4"                
[625] "thistle"             
[626] "thistle1"            
[627] "thistle2"            
[628] "thistle3"            
[629] "thistle4"            
[630] "tomato"              
[631] "tomato1"             
[632] "tomato2"             
[633] "tomato3"             
[634] "tomato4"             
[635] "turquoise"           
[636] "turquoise1"          
[637] "turquoise2"          
[638] "turquoise3"          
[639] "turquoise4"          
[640] "violet"              
[641] "violetred"           
[642] "violetred1"          
[643] "violetred2"          
[644] "violetred3"          
[645] "violetred4"          
[646] "wheat"               
[647] "wheat1"              
[648] "wheat2"              
[649] "wheat3"              
[650] "wheat4"              
[651] "whitesmoke"          
[652] "yellow"              
[653] "yellow1"             
[654] "yellow2"             
[655] "yellow3"             
[656] "yellow4"             
[657] "yellowgreen"         

| That's not the answer I was looking for, but
| try again. Or, type info() for more options.

| Type sample(colors(),10) at the command
| prompt.

> sample(colors(,10))
Error in colors(, 10) : unused argument (10)
> sample(colors(),10)
 [1] "mediumvioletred" "springgreen4"   
 [3] "gray97"          "snow3"          
 [5] "indianred3"      "brown2"         
 [7] "lemonchiffon"    "gray66"         
 [9] "salmon4"         "paleturquoise1" 

| All that hard work is paying off!

  |=====                                |  13%

| We see a lot of variety in the colors, some
| of which are names followed by numbers
| indicating that there are multiple forms of
| that particular color.

...

  |=====                                |  15%

| So you're free to use any of these 600+
| colors listed by the colors function.
| However, two additional functions from
| grDevices, colorRamp and colorRampPalette,
| give you more options. Both of these take
| color names as arguments and use them as
| "palettes", that is, these argument colors
| are blended in different proportions to form
| new colors.

...

  |======                               |  16%

| The first, colorRamp, takes a palette of
| colors (the arguments) and returns a
| function that takes values between 0 and 1
| as arguments. The 0 and 1 correspond to the
| extremes of the color palette. Arguments
| between 0 and 1 return blends of these
| extremes.

...

  |=======                              |  18%

| Let's see what this means. Assign to the
| variable pal the output of a call to
| colorRamp with the single argument,
| c("red","blue").

> colorRamp(c("red","blue"))
function (x) 
roundcolor(cbind(palette[[1L]](x), palette[[2L]](x), palette[[3L]](x), 
    if (alpha) palette[[4L]](x))) * 255
<bytecode: 0x0000000019bd45b0>
<environment: 0x0000000015bbc118>

| That's not the answer I was looking for, but
| try again. Or, type info() for more options.

| Type pal <- colorRamp(c("red","blue")) at
| the command prompt.

> pal<-colorRamp(c("red","blue"))

| You are amazing!

  |=======                              |  19%

| We don't see any output, but R has created
| the function pal which we can call with a
| single argument between 0 and 1. Call pal
| now with the argument 0.

> pal[0]
Error in pal[0] : object of type 'closure' is not subsettable
> pal(0)
     [,1] [,2] [,3]
[1,]  255    0    0

| All that hard work is paying off!

  |========                             |  21%

| We see a 1 by 3 array with 255 as the first
| entry and 0 in the other 2. This 3 long
| vector corresponds to red, green, blue (RGB)
| color encoding commonly used in televisions
| and monitors. In R, 24 bits are used to
| represent colors. Think of these 24 bits as
| 3 sets of 8 bits, each of which represents
| an intensity for one of the colors red,
| green, and blue.

...

  |========                             |  22%

| The 255 returned from the pal(0) call
| corresponds to the largest possible number
| represented with 8 bits, so the vector
| (255,0,0) contains only red (no green or
| blue), and moreover, it's the highest
| possible value of red.

...

  |=========                            |  24%

| Given that you created pal with the palette
| containing "red" and "blue", what color do
| you think will be represented by the vector
| that pal(1) returns? Recall that pal will
| only take arguments between 0 and 1, so 1 is
| the largest argument you can pass it.

1: yellow
2: green
3: blue
4: red

Selection: 3

| Perseverance, that's the answer.

  |=========                            |  25%

| Check your answer now by calling pal with
| the argument 1.

> pal(1)
     [,1] [,2] [,3]
[1,]    0    0  255

| All that practice is paying off!

  |==========                           |  26%

| You see the vector (0,0,255) which
| represents the highest intensity of blue.
| What vector do you think the call pal(.5)
| will return?

1: (0,255,0)
2: (255,255,255)
3: (255,0,255)
4: (127.5,0,127.5)

Selection: 3

| You almost had it, but not quite. Try again.

| The correct answer should be halfway between
| (255,0,0) and (0,0,255). Which is the only
| choice that is the average (mean) of these
| two?

1: (255,255,255)
2: (0,255,0)
3: (127.5,0,127.5)
4: (255,0,255)

Selection: 2

| That's not the answer I was looking for, but
| try again.

| The correct answer should be halfway between
| (255,0,0) and (0,0,255). Which is the only
| choice that is the average (mean) of these
| two?

1: (255,0,255)
2: (255,255,255)
3: (0,255,0)
4: (127.5,0,127.5)

Selection: 4

| Keep up the great work!

  |==========                           |  28%

| The function pal can take more than one
| argument. It returns one 3-long (or 4-long,
| but more about this later) vector for each
| argument. To see this in action, call pal
| with the argument seq(0,1,len=6).

> pal(seq(0,1,len=6))
     [,1] [,2] [,3]
[1,]  255    0    0
[2,]  204    0   51
[3,]  153    0  102
[4,]  102    0  153
[5,]   51    0  204
[6,]    0    0  255

| Perseverance, that's the answer.

  |===========                          |  29%

| Six vectors (each of length 3) are returned.
| The i-th vector is identical to output that
| would be returned by the call pal(i/5) for
| i=0,...5. We see that the i-th row (for
| i=1,...6) differs from the (i-1)-st row in
| the following way. Its red entry is 51 =
| 255/5 points lower and its blue entry is 51
| points higher.

...

  |===========                          |  31%

| So pal creates colors using the palette we
| specified when we called colorRamp. In this
| example none of pal's outputs will ever
| contain green since it wasn't in our initial
| palette.

...

  |============                         |  32%

| We'll turn now to colorRampPalette, a
| function similar to colorRamp. It also takes
| a palette of colors and returns a function.
| This function, however, takes integer
| arguments (instead of numbers between 0 and
| 1) and returns a vector of colors each of
| which is a blend of colors of the original
| palette.

...

  |=============                        |  34%

| The argument you pass to the returned
| function specifies the number of colors you
| want returned. Each element of the returned
| vector is a 24 bit number, represented as 6
| hexadecimal characters, which range from 0
| to F. This set of 6 hex characters
| represents the intensities of red, green,
| and blue, 2 characters for each color.

...

  |=============                        |  35%

| To see this better, assign to the variable
| p1 the output of a call to colorRampPalette
| with the single argument, c("red","blue").
| We'll compare it to our experiments using
| colorRamp.

> colorRampPalette(c("red","blue"))
function (n) 
{
    x <- ramp(seq.int(0, 1, length.out = n))
    if (ncol(x) == 4L) 
        rgb(x[, 1L], x[, 2L], x[, 3L], x[, 4L], maxColorValue = 255)
    else rgb(x[, 1L], x[, 2L], x[, 3L], maxColorValue = 255)
}
<bytecode: 0x0000000019be06c8>
<environment: 0x00000000131db940>

| Keep trying! Or, type info() for more
| options.

| Type p1 <- colorRampPalette(c("red","blue"))
| at the command prompt.

> p1<-colorRampPalette(c("red","blue"))

| You are quite good my friend!

  |==============                       |  37%

| Now call p1 with the argument 2.

> p1
function (n) 
{
    x <- ramp(seq.int(0, 1, length.out = n))
    if (ncol(x) == 4L) 
        rgb(x[, 1L], x[, 2L], x[, 3L], x[, 4L], maxColorValue = 255)
    else rgb(x[, 1L], x[, 2L], x[, 3L], maxColorValue = 255)
}
<bytecode: 0x0000000019be06c8>
<environment: 0x000000001392f370>

| Not quite, but you're learning! Try again.
| Or, type info() for more options.

| Type p1(2) at the command prompt.

> p1(2)
[1] "#FF0000" "#0000FF"

| You got it!

  |==============                       |  38%

| We see a 2-long vector is returned. The
| first entry FF0000 represents red. The FF is
| hexadecimal for 255, the same value returned
| by our call pal(0). The second entry 0000FF
| represents blue, also with intensity 255.

...

  |===============                      |  40%

| Now call p1 with the argument 6. Let's see
| if we get the same result as we did when we
| called pal with the argument seq(0,1,len=6).

> p1(6)
[1] "#FF0000" "#CC0033" "#990066" "#650099"
[5] "#3200CC" "#0000FF"

| You are amazing!

  |===============                      |  41%

| Now we get the 6-long vector (FF0000,
| CC0033, 990066, 650099, 3200CC, 0000FF). We
| see the two ends (FF0000 and 0000FF) are
| consistent with the colors red and blue. How
| about CC0033? Type 0xcc or 0xCC at the
| command line to see the decimal equivalent
| of this hex number. You must include the 0
| before the x to specify that you're entering
| a hexadecimal number.

> 0xcc
[1] 204

| Keep working like that and you'll get there!

  |================                     |  43%

| So 0xCC equals 204 and we can easily convert
| hex 33 to decimal, as in 0x33=3*16+3=51.
| These were exactly the numbers we got in the
| second row returned from our call to
| pal(seq(0,1,len=6)). We see that 4 of the 6
| numbers agree with our earlier call to pal.
| Two of the 6 differ slightly.

...

  |================                     |  44%

| We can also form palettes using colors other
| than red, green and blue. Form a palette,
| p2, by calling colorRampPalette with the
| colors "red" and "yellow". Remember to
| concatenate them into a single argument.

> p2<-colorRampPalette(c("red","yellow"))

| Excellent work!

  |=================                    |  46%

| Now call p2 with the argument 2. This will
| show us the two extremes of the blends of
| colors we'll get.

> p2(2)
[1] "#FF0000" "#FFFF00"

| You got it!

  |=================                    |  47%

| Not surprisingly the first color we see is
| FF0000, which we know represents red. The
| second color returned, FFFF00, must
| represent yellow, a combination of full
| intensity red and full intensity green. This
| makes sense, since yellow falls between red
| and green on the color wheel as we see here.
| (We borrowed this image from
| lucaskrech.com.)

...

  |==================                   |  49%

| Let's now call p2 with the argument 10. This
| will show us how the two extremes, red and
| yellow, are blended together.

> p2(10)
 [1] "#FF0000" "#FF1C00" "#FF3800" "#FF5500"
 [5] "#FF7100" "#FF8D00" "#FFAA00" "#FFC600"
 [9] "#FFE200" "#FFFF00"

| You are quite good my friend!

  |==================                   |  50%

| So we see the 10-long vector. For each
| element, the red component is fixed at FF,
| and the green component grows from 00 (at
| the first element) to FF (at the last).

...

  |===================                  |  51%

| This is all fine and dandy but you're
| probably wondering when you can see how all
| these colors show up in a display. We copied
| some code from the R documentation pages
| (color.scale if you're interested) and
| created a function for you, showMe. This
| takes as an argument, a color vector, which
| as you know, is precisely what calls to p1
| and p2 return to you. Call showMe now with
| p1(20).

> showMe(p1(20))

| That's the answer I was looking for.

  |====================                 |  53%

| We see the interpolated palette here. Low
| values in the lower left corner are red and
| as you move to the upper right, the colors
| move toward blue. Now call showMe with
| p2(20) as its argument.

> p2(20)
 [1] "#FF0000" "#FF0D00" "#FF1A00" "#FF2800"
 [5] "#FF3500" "#FF4300" "#FF5000" "#FF5D00"
 [9] "#FF6B00" "#FF7800" "#FF8600" "#FF9300"
[13] "#FFA100" "#FFAE00" "#FFBB00" "#FFC900"
[17] "#FFD600" "#FFE400" "#FFF100" "#FFFF00"

| Not quite! Try again. Or, type info() for
| more options.

| Type showMe(p2(20)) at the command prompt.

> showMe(p2(20))

| That's correct!

  |====================                 |  54%

| Here we see a similar display, the colors
| moving from red to yellow, the base colors
| of our p2 palette. For fun, see what p2(2)
| looks like using showMe.

> p2(2)
[1] "#FF0000" "#FFFF00"

| That's not exactly what I'm looking for. Try
| again. Or, type info() for more options.

| Type showMe(p2(2))) at the command prompt.

> showMe(p2(2))

| Keep working like that and you'll get there!

  |=====================                |  56%

| A much more basic pattern, simple but
| elegant.

...

  |=====================                |  57%

| We mentioned before that colorRamp (and
| colorRampPalette) could return a 3 or 4 long
| vector of colors. We saw 3-long vectors
| returned indicating red, green, and blue
| intensities. What would the 4th entry be?

...

  |======================               |  59%

| We'll answer this indirectly. First, look at
| the function p1 that colorRampPalette
| returned to you. Just type p1 at the command
| prompt.

> p1
function (n) 
{
    x <- ramp(seq.int(0, 1, length.out = n))
    if (ncol(x) == 4L) 
        rgb(x[, 1L], x[, 2L], x[, 3L], x[, 4L], maxColorValue = 255)
    else rgb(x[, 1L], x[, 2L], x[, 3L], maxColorValue = 255)
}
<bytecode: 0x0000000019be06c8>
<environment: 0x000000001392f370>

| You nailed it! Good job!

  |======================               |  60%

| We see that p1 is a short function with one
| argument, n. The argument n is used as the
| length in a call to the function seq.int,
| itself an argument to the function ramp. We
| can infer that ramp is just going to divide
| the interval from 0 to 1 into n pieces.

...

  |=======================              |  62%

| The heart of p1 is really the call to the
| function rgb with either 4 or 5 arguments.
| Use the ?fun construct to look at the R
| documentation for rgb now.

> rgb
function (red, green, blue, alpha, names = NULL, maxColorValue = 1) 
{
    if (missing(green) && missing(blue)) {
        if (is.matrix(red) || is.data.frame(red)) {
            red <- data.matrix(red)
            if (ncol(red) < 3L) 
                stop("at least 3 columns needed")
            green <- red[, 2L]
            blue <- red[, 3L]
            red <- red[, 1L]
        }
    }
    .Call(C_rgb, red, green, blue, if (missing(alpha)) NULL else alpha, 
        maxColorValue, names)
}
<bytecode: 0x00000000172d0988>
<environment: namespace:grDevices>

| Not quite! Try again. Or, type info() for
| more options.

| Type ?rgb at the command prompt.

> ?rgb

| You are amazing!

  |=======================              |  63%

| We see that rgb is a color specification
| function that can be used to produce any
| color with red, green, blue proportions. We
| see the maxColorValue is 1 by default, so if
| we called rgb with values for red, green and
| blue, we would specify numbers at most 1
| (assuming we didn't change the default for
| maxColorValue). According to the
| documentation, what is the maximum number of
| arguments rgb can have?

1: 6
2: 5
3: 4
4: 3

Selection: 1

| You're the best!

  |========================             |  65%

| So the fourth argument is alpha which can be
| a logical, i.e., either TRUE or FALSE, or a
| numerical value. Create the function p3 now
| by calling colorRampPalette with the colors
| blue and green (remember to concatenate them
| into a single argument) and setting the
| alpha argument to .5.

> p2<-colorRampPalette(c("blue","green"), alpha = .5)

| You're close...I can feel it! Try it again.
| Or, type info() for more options.

| Type p3 <-
| colorRampPalette(c("blue","green"),alpha=.5)
| at the command prompt.

> p3<-colorRampPalette(c("blue","green"), alpha = .5)

| You are amazing!

  |========================             |  66%

| Now call p3 with the argument 5.

> p3(5)
[1] "#0000FFFF" "#003FBFFF" "#007F7FFF"
[4] "#00BF3FFF" "#00FF00FF"

| Keep working like that and you'll get there!

  |=========================            |  68%

| We see that in the 5-long vector that the
| call returned, each element has 32 bits, 4
| groups of 8 bits each. The last 8 bits
| represent the value of alpha. Since it was
| NOT ZERO in the call to colorRampPalette, it
| gets the maximum FF value. (The same result
| would happen if alpha had been set to TRUE.)
| When it was 0 or FALSE (as in previous calls
| to colorRampPalette) it was given the value
| 00 and wasn't shown. The leftmost 24 bits of
| each element are the same RGB encoding we
| previously saw.

...

  |==========================           |  69%

| So what is alpha? Alpha represents an
| opacity level, that is, how transparent
| should the colors be. We can add color
| transparency with the alpha parameter to
| calls to rgb. We haven't seen any examples
| of this yet, but we will now.

...

  |==========================           |  71%

| We generated 1000 random normal pairs for
| you in the variables x and y. We'll plot
| them in a scatterplot by calling plot with 4
| arguments. The variables x and y are the
| first 2. The third is the print character
| argument pch. Set this equal to 19 (filled
| circles). The final argument is col which
| should be set equal to a call to rgb. Give
| rgb 3 arguments, 0, .5, and .5.

> plot(rnorm(1000),rnorm(1000), pch = 19, col= rgb(c(0, 0.5, 0.5))
+ )
Error in rgb(c(0, 0.5, 0.5)) : 
  argument "green" is missing, with no default
> plot(rnorm(1000),rnorm(1000), pch = 19, col= rgb(0,0.5,0.5))

| Not quite right, but keep trying. Or, type
| info() for more options.

| Type plot(x,y,pch=19,col=rgb(0,.5,.5)) at
| the command prompt.

> plot(x,y,pch = 19, col = rgb(0,.5,.5))

| You are amazing!

  |===========================          |  72%

| Well this picture is okay for a scatterplot,
| a nice mix of blue and green, but it really
| doesn't tell us too much information in the
| center portion, since the points are so
| thick there. We see there are a lot of
| points, but is one area more filled than
| another? We can't really discriminate
| between different point densities. This is
| where the alpha argument can help us. Recall
| your plot command (use the up arrow) and add
| a 4th argument, .3, to the call to rgb. This
| will be our value for alpha.

> plot(x,y,pch = 19, col = rgb(0,.5,.5,.3))

| You're the best!

  |===========================          |  74%

| Clearly this is better. It shows us where,
| specifically, the densest areas of the
| scatterplot really are.

...

  |============================         |  75%

| Our last topic for this lesson is the
| RColorBrewer Package, available on CRAN,
| that contains interesting and useful color
| palettes, of which there are 3 types,
| sequential, divergent, and qualitative.
| Which one you would choose to use depends on
| your data.

...

  |============================         |  76%

| Here's a picture of the palettes available
| from this package. The top section shows the
| sequential palettes in which the colors are
| ordered from light to dark. The divergent
| palettes are at the bottom. Here the neutral
| color (white) is in the center, and as you
| move from the middle to the two ends of each
| palette, the colors increase in intensity.
| The middle display shows the qualitative
| palettes which look like collections of
| random colors. These might be used to
| distinguish factors in your data.

...

  |=============================        |  78%

| These colorBrewer palettes can be used in
| conjunction with the colorRamp() and
| colorRampPalette() functions. You would use
| colors from a colorBrewer palette as your
| base palette,i.e., as arguments to colorRamp
| or colorRampPalette which would interpolate
| them to create new colors.

...

  |=============================        |  79%

| As an example of this, create a new object,
| cols by calling the function brewer.pal with
| 2 arguments, 3 and "BuGn". This last is the
| second last palette in the sequential
| display. The 3 tells the function how many
| different colors we want.

> cols<-brewer.pal(3,"BuGn")

| Excellent work!

  |==============================       |  81%

| Use showMe to look at cols now.

> showMe(cols)

| You are really on a roll!

  |==============================       |  82%

| We see 3 colors, mixes of blue and green.
| Now create the variable pal by calling
| colorRampPalette with cols as its argument.

> pal<-colorRampPalette(cols(3,"BuGn"))
Error in match(x, table, nomatch = 0L) : could not find function "cols"
> pa<-colorRampPalette(cols)

| You're close...I can feel it! Try it again.
| Or, type info() for more options.

| Type pal <- colorRampPalette(cols) at the
| command prompt.

> pal<-colorRampPalette(cols)

| All that hard work is paying off!

  |===============================      |  84%

| The call showMe(pal(3)) would be identical
| to the showMe(cols) call. So use showMe to
| look at pal(20).

> pal(20)
 [1] "#E5F5F9" "#DDF1F3" "#D5EEEE" "#CDEBE9"
 [5] "#C5E8E4" "#BDE5DF" "#B5E2DA" "#ADDFD5"
 [9] "#A4DCD0" "#9DD9CB" "#93D5C3" "#87CFB8"
[13] "#7CC9AD" "#70C4A1" "#65BE96" "#59B88B"
[17] "#4EB380" "#42AD75" "#37A76A" "#2CA25F"

| Try again. Getting it right on the first try
| is boring anyway! Or, type info() for more
| options.

| Type showMe(pal(20)) at the command prompt.

> showMe(pal(20))

| All that practice is paying off!

  |================================     |  85%

| Now we can use the colors in pal(20) to
| display topographic information on
| Auckland's Maunga Whau Volcano. R provides
| this information in a matrix called volcano
| which is included in the package datasets.
| Call the R function image with volcano as
| its first argument and col set equal to
| pal(20) as its second.

> image(volcano, col = pal(20))

| You got it!

  |================================     |  87%

| We see that the colors here of the
| sequential palette clue us in on the
| topography. The darker colors are more
| concentrated than the lighter ones. Just for
| fun, recall your last command calling image
| and instead of pal(20), use p1(20) as the
| second argument.

> image(volcano, col = pal(20),p1(20))
Error in image.default(volcano, col = pal(20), p1(20)) : 
  'x' and 'y' values must be finite and non-missing
> image(volcano, col = p1(20))

| You are doing so well!

  |=================================    |  88%

| Not as nice a picture since the palette
| isn't as well suited to this data, but
| that's okay. It's review time!!!!

...

  |=================================    |  90%

| True or False? Careful use of colors in
| plots/maps/etc. can make it easier for the
| reader to understand what points you're
| trying to convey.

1: True
2: False

Selection: 1

| You are really on a roll!

  |==================================   |  91%

| Which of the following is an R package that
| provides color palettes for sequential,
| categorical, and diverging data?

1: RColorVintner
2: RColorStewer
3: RColorBluer
4: RColorBrewer

Selection: 4

| That's the answer I was looking for.

  |==================================   |  93%

| True or False? The colorRamp and
| colorRampPalette functions can be used in
| conjunction with color palettes to connect
| data to colors.

1: False
2: True

Selection: 2

| All that practice is paying off!

  |===================================  |  94%

| True or False?  Transparency can NEVER be
| used to clarify plots with many points

1: False
2: True

Selection: 1

| You're the best!

  |===================================  |  96%

| True or False?  The call p7 <-
| colorRamp("red","blue") would work (i.e.,
| not generate an error).

1: False
2: True

Selection: 2

| One more time. You can do it!

| Recall our reminders to concatenate the
| colors to form a single argument.

1: False
2: True

Selection: 1

| You are amazing!

  |==================================== |  97%

| True or False?  The function colors returns
| only 10 colors.

1: False
2: True

Selection: 2

| That's not exactly what I'm looking for. Try
| again.

| We only looked at 10 but there were many,
| many more.

1: True
2: False

Selection: 2

| Great job!

  |==================================== |  99%

| Transparency is determined by which
| parameter of the rgb function?

1: alpha
2: beta
3: delta
4: it's all Greek to me
5: gamma

Selection: 1

| Great job!

  |=====================================| 100%

| Congratulations! We hope this lesson didn't
| make you see red. We're green with envy that
| you blue through it.

